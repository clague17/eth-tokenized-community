import type { NextPage } from "next";
import { useEffect, useState, useCallback, useReducer } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import twitterLogo from "../public/twitter-logo.svg";
import { Heading, Card, Text, Button, Tag } from "degen";
import Web3Modal from "web3modal";
import { ethers, providers } from "ethers";
import { NFTMembership, ActionType, StateType } from "../utils/types";
import { getChainData, ellipseAddress } from "../utils/utilities";

// misc imports:
const TWITTER_HANDLE = "clague17";
const TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;

const providerOptions = {};

const subscriptions: Array<NFTMembership> = [
  {
    image: "https://picsum.photos/200", // random img endpoint
    title: "Luis",
    description: "This is an NFT membership!",
    price: 20,
    tags: ["HOT", "100 $ECHO"],
  },
  {
    image: "https://picsum.photos/200", // random img endpoint
    title: "Clague",
    description: "This is an NFT membership! 2",
    price: 20,
    tags: ["NEW", "HOT"],
  },
];

let web3Modal: Web3Modal;
if (typeof window !== "undefined") {
  web3Modal = new Web3Modal({
    network: "mainnet", // optional
    cacheProvider: true,
    providerOptions, // required
  });
}

const initialState: StateType = {
  provider: null,
  web3Provider: null,
  address: undefined,
  chainId: undefined,
};

function reducer(state: StateType, action: ActionType): StateType {
  switch (action.type) {
    case "SET_WEB3_PROVIDER":
      return {
        ...state,
        provider: action.provider,
        web3Provider: action.web3Provider,
        address: action.address,
        chainId: action.chainId,
      };
    case "SET_ADDRESS":
      return {
        ...state,
        address: action.address,
      };
    case "SET_CHAIN_ID":
      return {
        ...state,
        chainId: action.chainId,
      };
    case "RESET_WEB3_PROVIDER":
      return initialState;
    default:
      throw new Error();
  }
}

const Home: NextPage = () => {
  const [state, dispatch] = useReducer(reducer, initialState);
  const { provider, web3Provider, address, chainId } = state;

  const connect = async function () {
    // useCallback is nice because this function will be the same
    // This is the initial `provider` that is returned when
    // using web3Modal to connect. Can be MetaMask or WalletConnect.
    const provider = await web3Modal.connect();

    // We plug the initial `provider` into ethers.js and get back
    // a Web3Provider. This will add on methods from ethers.js and
    // event listeners such as `.on()` will be different.
    const web3Provider = new providers.Web3Provider(provider);

    const signer = web3Provider.getSigner();
    const address = await signer.getAddress();

    const network = await web3Provider.getNetwork();

    dispatch({
      type: "SET_WEB3_PROVIDER",
      provider,
      web3Provider,
      address,
      chainId: network.chainId,
    });
  };

  const disconnect = useCallback(async () => {
    console.log("What's going on here?", provider);
    web3Modal.clearCachedProvider();
    if (provider?.disconnect && typeof provider.disconnect === "function") {
      console.log("Are we supopsed to be here?");
      await provider.disconnect();
    }
    dispatch({
      type: "RESET_WEB3_PROVIDER",
    });
  }, [provider]);
  // // auto connect to the cached provider
  // useEffect(() => {
  //   if (web3Modal.cachedProvider) {
  //     connect();
  //   }
  // }, [connect]);

  useEffect(() => {
    if (provider?.on) {
      const handleAccountsChanged = (accounts: string[]) => {
        // eslint-disable-next-line no-console
        console.log("accountsChanged", accounts);
        dispatch({
          type: "SET_ADDRESS",
          address: accounts[0],
        });
      };

      // https://docs.ethers.io/v5/concepts/best-practices/#best-practices--network-changes
      const handleChainChanged = (_hexChainId: string) => {
        window.location.reload();
      };

      const handleDisconnect = (error: { code: number; message: string }) => {
        // eslint-disable-next-line no-console
        console.log("disconnect", error);
        disconnect();
      };

      provider.on("accountsChanged", handleAccountsChanged);
      provider.on("chainChanged", handleChainChanged);
      provider.on("disconnect", handleDisconnect);

      // Subscription Cleanup
      return () => {
        if (provider.removeListener) {
          provider.removeListener("accountsChanged", handleAccountsChanged);
          provider.removeListener("chainChanged", handleChainChanged);
          provider.removeListener("disconnect", handleDisconnect);
        }
      };
    }
  }, [provider, disconnect]);

  const chainData = getChainData(chainId);

  return (
    <div className={styles.container}>
      <Head>
        <title>Liquid</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div id="container" className="flex flex-col justify-center">
        <main className="flex w-full justify-center  border-b-2 border-black">
          <div
            id="navcontainer"
            className="align-center mx-5 flex w-full flex-row justify-between"
          >
            <img src="/liquid_banner.svg" alt="liquid" className="w-64" />
            <div id="right-navbar" className="flex">
              <div className="flex flex-row m-auto justify-between">
                <span className="p-4">
                  <Text variant="large">Creator</Text>
                </span>
                <span className="p-4">
                  <Text variant="large">Buyer</Text>
                </span>
                {address && (
                  <div className="grid px-4">
                    <div>
                      <p>{chainData?.name}</p>
                    </div>
                    <div>
                      <p>{ellipseAddress(address)}</p>
                    </div>
                  </div>
                )}
                <div className="m-auto">
                  {web3Provider ? (
                    <Button onClick={disconnect}>Disconnect Wallet</Button>
                  ) : (
                    <Button onClick={connect}>Connect Wallet</Button>
                  )}
                </div>
              </div>
            </div>
          </div>
        </main>
        <div className="w-[40%] m-auto">
          <div id="main-content" className="relative w-full py-5">
            <Card padding="6" shadow>
              <Heading>NFT Subscriptions</Heading>
              <Text>Sign in with your wallet to make your own!</Text>
              {subscriptions.map((sus, idx) => (
                <div key={idx} className="m-6">
                  <Card hover padding="2">
                    <img src={sus.image} className="rounded-xl m-auto" />
                    <div className="pt-2">
                      <Heading>{sus.title}</Heading>
                    </div>
                    <Text>{sus.description}</Text>
                    {sus.tags && (
                      <div className="flex">
                        {sus.tags?.map((tag, idx) => (
                          <Tag key={idx} hover>
                            {tag}
                          </Tag>
                        ))}
                      </div>
                    )}
                  </Card>
                </div>
              ))}
            </Card>
          </div>
        </div>
      </div>

      <footer className={styles.footer}>
        <a
          className="flex items-center justify-center font-bold"
          href={TWITTER_LINK}
          target="_blank"
          rel="noreferrer"
        >
          <Image alt="Twitter Logo" width={35} height={35} src={twitterLogo} />
          {`built by @${TWITTER_HANDLE}`}
        </a>
      </footer>
    </div>
  );
};

export default Home;
